# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Jay\Desktop\Fantasy_Cricket\Game\UI\Mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os
import sys
import sqlite3

cwd = os.getcwd()    # to get the location of file for any user

from NewTeam import Ui_NewTeam
from LoadTeam import Ui_LoadTeam
from EvalTeam import Ui_EvalTeam
import gamescore




playerstat = sqlite3.connect(cwd + '/databases/stats.db')
statcursor = playerstat.cursor()
team = sqlite3.connect(cwd + '/databases/team.db')
teamcursor = team.cursor()
matches = sqlite3.connect(cwd + '/databases/matches.db')
matchcursor = matches.cursor()

class Ui_MainWindow(object):
    
    def __init__(self):
        self.newDialog = QtWidgets.QMainWindow()
        self.new_screen = Ui_NewTeam()                           
        self.new_screen.setupUi(self.newDialog)

        self.loadDialog = QtWidgets.QMainWindow()
        self.load_screen= Ui_LoadTeam()
        self.load_screen.setupUi(self.loadDialog)

        self.evalDialog = QtWidgets.QMainWindow()
        self.eval_screen= Ui_EvalTeam()
        self.eval_screen.setupUi(self.evalDialog)
        
        self.msgDialog = QtWidgets.QMessageBox()
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(883, 626)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        MainWindow.setFont(font)
        
        #Icon for the Game
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(cwd + "/images/icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setSizeConstraint(QtWidgets.QLayout.SetFixedSize)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setMinimumSize(QtCore.QSize(859, 89))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        self.groupBox.setFont(font)
        self.groupBox.setObjectName("groupBox")
        self.groupBox.setStyleSheet('background-color: lightgrey')
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.groupBox)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        
        #Number of Batsman choosed 
        self.batcount = 0
        self.bat_label = QtWidgets.QLabel(self.groupBox)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.bat_label.setFont(font)
        self.bat_label.setObjectName("bat_label")
        self.horizontalLayout_4.addWidget(self.bat_label)
        self.bat_number = QtWidgets.QLCDNumber(self.groupBox)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(20)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.bat_number.setFont(font)
        self.bat_number.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.bat_number.setSmallDecimalPoint(False)
        self.bat_number.setDigitCount(2)
        self.bat_number.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.bat_number.setProperty("intValue", 0)
        self.bat_number.setObjectName("bat_number")
        self.bat_number.setStyleSheet('color: blue')
        self.horizontalLayout_4.addWidget(self.bat_number)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem)
        
        
        
        #Number of Bowlers choosed
        self.bwlcount = 0
        self.bwl_label = QtWidgets.QLabel(self.groupBox)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.bwl_label.setFont(font)
        self.bwl_label.setObjectName("bwl_label")
        self.horizontalLayout_4.addWidget(self.bwl_label)
        self.bwl_number = QtWidgets.QLCDNumber(self.groupBox)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(20)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.bwl_number.setFont(font)
        self.bwl_number.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.bwl_number.setSmallDecimalPoint(False)
        self.bwl_number.setDigitCount(2)
        self.bwl_number.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.bwl_number.setProperty("intValue", 0)
        self.bwl_number.setObjectName("bwl_number")
        self.bwl_number.setStyleSheet('color: blue')
        self.horizontalLayout_4.addWidget(self.bwl_number)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem1)
        
        #Number of All Rounders choosed
        self.arcount = 0
        self.ar_label = QtWidgets.QLabel(self.groupBox)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ar_label.setFont(font)
        self.ar_label.setObjectName("ar_label")
        self.horizontalLayout_4.addWidget(self.ar_label)
        self.ar_number = QtWidgets.QLCDNumber(self.groupBox)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(20)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.ar_number.setFont(font)
        self.ar_number.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.ar_number.setSmallDecimalPoint(False)
        self.ar_number.setDigitCount(2)
        self.ar_number.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.ar_number.setProperty("intValue", 0)
        self.ar_number.setObjectName("ar_number")
        self.ar_number.setStyleSheet('color: blue')
        self.horizontalLayout_4.addWidget(self.ar_number)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem2)
        
        #Number of WicketKeeper choosed
        self.wkcount = 0
        self.wk_label = QtWidgets.QLabel(self.groupBox)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.wk_label.setFont(font)
        self.wk_label.setObjectName("wk_label")
        self.horizontalLayout_4.addWidget(self.wk_label)
        self.wk_number = QtWidgets.QLCDNumber(self.groupBox)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(20)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.wk_number.setFont(font)
        self.wk_number.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.wk_number.setSmallDecimalPoint(False)
        self.wk_number.setDigitCount(2)
        self.wk_number.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.wk_number.setProperty("intValue", 0)
        self.wk_number.setObjectName("wk_number")
        self.wk_number.setStyleSheet('color: blue')
        self.horizontalLayout_4.addWidget(self.wk_number)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem3)
        self.horizontalLayout.addWidget(self.groupBox)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem4)
        
        #Points Available out of 1000
        self.availcount = 1000
        self.PtAvail_label = QtWidgets.QLabel(self.centralwidget)
        self.PtAvail_label.setMinimumSize(QtCore.QSize(128, 39))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(11)
        self.PtAvail_label.setFont(font)
        self.PtAvail_label.setObjectName("PtAvail_label")
        self.horizontalLayout_2.addWidget(self.PtAvail_label)
        self.PtAvail = QtWidgets.QLCDNumber(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.PtAvail.setFont(font)
        self.PtAvail.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.PtAvail.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.PtAvail.setDigitCount(4)
        self.PtAvail.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.PtAvail.setProperty("intValue", 1000)
        self.PtAvail.setObjectName("PtAvail")
        self.PtAvail.setStyleSheet('color: blue')
        self.horizontalLayout_2.addWidget(self.PtAvail)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem5)
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem6)
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem7)
        spacerItem8 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem8)
        spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem9)
        
        #Points Used out of 1000
        self.usedcount  = 0
        self.PtUsed_label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(11)
        self.PtUsed_label.setFont(font)
        self.PtUsed_label.setObjectName("PtUsed_label")
        self.horizontalLayout_2.addWidget(self.PtUsed_label)
        self.PtUsed = QtWidgets.QLCDNumber(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setBold(True)
        font.setWeight(75)
        self.PtUsed.setFont(font)
        self.PtUsed.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.PtUsed.setDigitCount(4)
        self.PtUsed.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.PtUsed.setObjectName("PtUsed")
        self.PtUsed.setStyleSheet('color: blue')
        self.horizontalLayout_2.addWidget(self.PtUsed)
        spacerItem10 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem10)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        
        #Bat Radio Button
        self.bat_radioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.bat_radioButton.setMinimumSize(QtCore.QSize(61, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.bat_radioButton.setFont(font)
        self.bat_radioButton.setObjectName("bat_radioButton")
        self.horizontalLayout_5.addWidget(self.bat_radioButton)
        self.bat_radioButton.clicked.connect(self.get_names)
        
        #Bwl Radio Button
        self.bwl_radioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.bwl_radioButton.setMinimumSize(QtCore.QSize(61, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.bwl_radioButton.setFont(font)
        self.bwl_radioButton.setObjectName("bwl_radioButton")
        self.horizontalLayout_5.addWidget(self.bwl_radioButton)
        self.bwl_radioButton.clicked.connect(self.get_names)
        
        #AR Radio Button
        self.ar_radioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.ar_radioButton.setMinimumSize(QtCore.QSize(61, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.ar_radioButton.setFont(font)
        self.ar_radioButton.setObjectName("ar_radioButton")
        self.horizontalLayout_5.addWidget(self.ar_radioButton)
        self.ar_radioButton.clicked.connect(self.get_names)
        
        #WK Radio Button
        self.wk_radioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.wk_radioButton.setMinimumSize(QtCore.QSize(61, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.wk_radioButton.setFont(font)
        self.wk_radioButton.setObjectName("wk_radioButton")
        self.horizontalLayout_5.addWidget(self.wk_radioButton)
        self.wk_radioButton.clicked.connect(self.get_names)
        
        spacerItem11 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem11)
        spacerItem12 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem12)
        spacerItem13 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem13)
        spacerItem14 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem14)
        self.tname_label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.tname_label.setFont(font)
        self.tname_label.setObjectName("tname_label")
        self.horizontalLayout_5.addWidget(self.tname_label)
        self.tname = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.tname.setFont(font)
        self.tname.setObjectName("tname")
        self.tname.setStyleSheet('color: blue')
        self.horizontalLayout_5.addWidget(self.tname)
        spacerItem15 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem15)
        self.verticalLayout.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        #Available players list widget
        self.avail_listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.avail_listWidget.setObjectName("avail_listWidget")
        self.horizontalLayout_3.addWidget(self.avail_listWidget)
        self.avail_listWidget.itemDoubleClicked.connect(self.remove_1)
        
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_3.addWidget(self.label_7)
        #Selected player list widget
        self.used_listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.used_listWidget.setObjectName("used_listWidget")
        self.horizontalLayout_3.addWidget(self.used_listWidget)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.used_listWidget.itemDoubleClicked.connect(self.remove_2)
        MainWindow.setCentralWidget(self.centralwidget)
        
        #Total Number of players
        self.totalcount = 0
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        spacerItem16 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem16)
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.horizontalLayout_6.addWidget(self.label_8)
        self.total_number = QtWidgets.QLCDNumber()
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(20)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.total_number.setFont(font)
        self.total_number.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.total_number.setSmallDecimalPoint(False)
        self.total_number.setDigitCount(2)
        self.total_number.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.total_number.setProperty("intValue", 0)
        self.total_number.setObjectName("total_number")
        self.total_number.setStyleSheet('color: blue')
        self.horizontalLayout_6.addWidget(self.total_number)
        self.verticalLayout.addLayout(self.horizontalLayout_6)
        
        #Menu Bar
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 883, 26))
        self.menubar.setObjectName("menubar")
        self.menuManage_Team = QtWidgets.QMenu(self.menubar)
        self.menuManage_Team.setStyleSheet("background-color=\'grey\'")
        #Menu Manage Team
        self.menuManage_Team.setObjectName("menuManage_Team")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        #Manage Team Action New Team
        self.actionNew_Team = QtWidgets.QAction(MainWindow)
        self.actionNew_Team.setObjectName("actionNew_Team")
        self.menuManage_Team.addAction(self.actionNew_Team)
        self.actionNew_Team.triggered.connect(self.new_file)
        #Manage Team action load team
        self.actionLoad_Team = QtWidgets.QAction(MainWindow)
        self.actionLoad_Team.setObjectName("actionLoad_Team")
        self.menuManage_Team.addAction(self.actionLoad_Team)
        self.actionLoad_Team.triggered.connect(self.load_file)
        
        self.menuManage_Team.addSeparator()
        #Manage Team action save team
        self.actionSave_Team = QtWidgets.QAction(MainWindow)
        self.actionSave_Team.setObjectName("actionSave_Team")
        self.menuManage_Team.addAction(self.actionSave_Team)
        self.actionSave_Team.triggered.connect(self.save_file)
        #Manage Team action evaluate team
        self.actionEvaluate_Team = QtWidgets.QAction(MainWindow)
        self.actionEvaluate_Team.setObjectName("actionEvaluate_Team")
        self.menuManage_Team.addAction(self.actionEvaluate_Team)
        self.actionEvaluate_Team.triggered.connect(self.eval_file)
        
        self.menuManage_Team.addSeparator()
        #Manage Team action exit
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.menuManage_Team.addAction(self.actionExit)
        self.actionExit.triggered.connect(self.exit)
        
        self.eval_screen.team_comboBox.currentTextChanged.connect(self.combo)
    
        self.menubar.addAction(self.menuManage_Team.menuAction())
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Fantasy Cricket"))
        self.groupBox.setTitle(_translate("MainWindow", "Your Selection"))
        self.bat_label.setText(_translate("MainWindow", "Batsmen(BAT):"))
        self.bwl_label.setText(_translate("MainWindow", "Bowlers(BWL):"))
        self.ar_label.setText(_translate("MainWindow", "AllRounder(AR):"))
        self.wk_label.setText(_translate("MainWindow", "WicketKeeper(WK):"))
        self.PtAvail_label.setText(_translate("MainWindow", "Points Available :"))
        self.PtUsed_label.setText(_translate("MainWindow", "Points Used :"))
        self.bat_radioButton.setText(_translate("MainWindow", "BAT"))
        self.bwl_radioButton.setText(_translate("MainWindow", "BWL"))
        self.ar_radioButton.setText(_translate("MainWindow", "AR"))
        self.wk_radioButton.setText(_translate("MainWindow", "WK"))
        self.tname_label.setText(_translate("MainWindow", "Team Name : "))
        self.tname.setText(_translate("MainWindow", "TextLabel"))
        self.label_7.setText(_translate("MainWindow", "       >       "))
        self.label_8.setText(_translate("MainWindow", "Total players : "))
        self.menuManage_Team.setTitle(_translate("MainWindow", "Manage Team"))
        self.actionNew_Team.setText(_translate("MainWindow", "New Team"))
        self.actionNew_Team.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.actionLoad_Team.setText(_translate("MainWindow", "Load Team"))
        self.actionLoad_Team.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionEvaluate_Team.setText(_translate("MainWindow", "Evaluate Team"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionSave_Team.setText(_translate("MainWindow", "Save Team"))
        self.actionSave_Team.setShortcut(_translate("MainWindow", "Ctrl+S"))
        
        
    #NEW FILE MENU
    def new_file(self):
        self.newDialog.show()
        self.new_screen.pushButton.clicked.connect(self.team_name)
        self.avail_listWidget.clear()
        self.used_listWidget.clear()
        self.batcount=0
        self.bat_number.display(self.batcount)
        self.bwlcount=0
        self.bwl_number.display(self.bwlcount)
        self.arcount=0
        self.ar_number.display(self.arcount)
        self.wkcount=0
        self.wk_number.display(self.wkcount)
        self.availcount=1000
        self.PtAvail.display(self.availcount)
        self.usedcount=0
        self.PtUsed.display(self.usedcount)
        self.totalcount=0
        self.total_number.display(self.totalcount)

    
    #FILE OPENING MENU
    def load_file(self):
        self.loadDialog.show()
        self.load_screen.pushButton.clicked.connect(self.load_names)
        
    #File Saving Menu
    def save_file(self):
        teamcursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        check = teamcursor.fetchall()
        teamname = self.tname.text()
        tables = []
        for i in range(len(check)):
            tables.append(check[i][0])
        if teamname in tables:
            teamcursor.execute('DROP TABLE '+teamname+';')
            teamcursor.execute(" CREATE TABLE "+teamname+''' (
                                players VARCHAR);'''
                            )
            players = []
            for i in range(self.used_listWidget.count()):
                players.append(self.used_listWidget.item(i).text())
            for i in players:
                teamcursor.execute('INSERT INTO '+teamname+' VALUES ("'+i+'");')
            team.commit()
            self.msgDialog.information(MainWindow, 'Message', 'Team Updated') 
        if self.batcount == 0 :
            self.msgDialog.warning(MainWindow, 'Message', 'Select atleast 1 batsman')
        if self.bwlcount == 0 :
            self.msgDialog.warning(MainWindow, 'Message', 'Select atleast 1 Bowler')
        if self.arcount == 0 :
            self.msgDialog.warning(MainWindow, 'Message', 'Select atleast 1 Allrounder')
        if self.wkcount == 0 :
            self.msgDialog.warning(MainWindow, 'Message', 'Select atleast 1 WicketKeeper')
        if self.totalcount < 11 :
            self.msgDialog.warning(MainWindow, 'Message', 'Select atleast 11 players for the team')           
        else:
            teamcursor.execute(" CREATE TABLE "+teamname+''' (
                                players VARCHAR);'''
                            )
            players = []
            for i in range(self.used_listWidget.count()):
                players.append(self.used_listWidget.item(i).text())
            for i in players:
                teamcursor.execute('INSERT INTO '+teamname+' VALUES ("'+i+'");')
            team.commit()
            self.msgDialog.information(MainWindow, 'Message', 'Team saved')
                
    #Evalutate window
    def eval_file(self):
        self.evalDialog.show()
    
    def combo(self):
        self.eval_screen.match_comboBox.currentTextChanged.connect(self.combo_2)
        
    def combo_2(self):
        team = self.eval_screen.team_comboBox.currentText()
        match = self.eval_screen.match_comboBox.currentText()
        
        self.eval_screen.points_listWidget.clear()
        self.eval_screen.players_listWidget.clear()
        
        teamcursor.execute('SELECT players FROM '+team+';')
        data = teamcursor.fetchall()
        list=[]
        list2 = []
        for i in range(len(data)):
            statcursor.execute('SELECT * FROM stats WHERE player = "'+data[i][0]+'";')
            name = statcursor.fetchone()
            list.append(name)
            matchcursor.execute('SELECT * FROM '+match+' WHERE Player = "'+data[i][0]+'";')
            name = matchcursor.fetchone()
            list2.append(name)
        list3=[]
        for i in range(len(list2)):
            if list[i][6] == 'BAT' or list[i][6] == 'WK':
                x = gamescore.batscore(list2[i][1],
                                       list2[i][2],
                                       list2[i][3],
                                       list2[i][4],
                                       list2[i][9]+list2[i][10]+list2[i][11]
                                       )
                list3.append((list2[i][0],x))
                
            elif list[i][6] == 'BWL':
                x = gamescore.bowlscore(list2[i][5],
                                        list2[i][7],
                                        list2[i][8],
                                        list2[i][9]+list2[i][10]+list2[i][11]
                                        )
                list3.append((list2[i][0],x))
                
            elif list[i][6] == 'AR':
                x = gamescore.batscore(list2[i][1],
                                       list2[i][2],
                                       list2[i][3],
                                       list2[i][4],
                                       list2[i][9]+list2[i][10]+list2[i][11]
                                       )
                y = gamescore.bowlscore(list2[i][5],
                                        list2[i][7],
                                        list2[i][8],
                                        list2[i][9]+list2[i][10]+list2[i][11]
                                        )
                z = x+y
                list3.append((list2[i][0],z))  
        
        totalscore = 0
        for i in range(len(list3)):
            totalscore += list3[i][1]
            name= QtWidgets.QListWidgetItem(list3[i][0])
            font = QtGui.QFont()
            font.setFamily("Comic Sans MS")
            font.setBold(True)
            font.setWeight(75)
            font.setPointSize(11)
            name.setFont(font)
            self.eval_screen.players_listWidget.addItem(name)
            val = str(list3[i][1]) 
            score= QtWidgets.QListWidgetItem(val)
            score.setFont(font)
            self.eval_screen.points_listWidget.addItem(score)
                                      
        self.eval_screen.teamscore.display(totalscore)
        
        
    #QUITING METHOD    
    def exit(self):
        sys.exit()
        
    def team_name(self):
        self.name = self.new_screen.lineEdit.text()
        self.tname.setText(self.name)
        self.newDialog.close()

    def load_names(self):
        self.name = self.load_screen.lineEdit.text()
        self.tname.setText(self.name)
        teamcursor.execute('SELECT players FROM '+self.name+';')
        data = teamcursor.fetchall()
        pt = 0
        for i in range(len(data)):
            item= QtWidgets.QListWidgetItem(data[i][0])
            font = QtGui.QFont()
            font.setBold(True)
            font.setWeight(75)
            font.setPointSize(12)
            item.setFont(font)
            self.used_listWidget.addItem(item)
            statcursor.execute('SELECT ctg,value FROM stats WHERE player = "'+data[i][0]+'";')
            val = statcursor.fetchone()
            pt += val[1]
            if val[0] == 'BAT':
                self.batcount += 1
            elif val[0] == 'BWL':
                self.bwlcount += 1
            elif val[0] == 'AR':
                self.arcount += 1
            elif val[0] == 'WK':
                self.wkcount += 1
        self.totalcount = 11
        self.total_number.display(self.totalcount)
        self.bat_number.display(self.batcount)
        self.bwl_number.display(self.bwlcount)
        self.ar_number.display(self.arcount)
        self.wk_number.display(self.wkcount)
        self.usedcount = pt
        self.availcount -= pt
        self.PtAvail.display(self.availcount)
        self.PtUsed.display(self.usedcount)
        self.loadDialog.close()
                
    def get_names(self):
        if self.bat_radioButton.isChecked() == True :
            statcursor.execute("select player from stats where ctg = 'BAT';")
            bat = statcursor.fetchall()
            self.avail_listWidget.clear()
            list=[]     #creating this list to not to show player in available players list
                        #If the player name is present in selected playes list
            for j in range(self.used_listWidget.count()):
                list.append(self.used_listWidget.item(j).text()) 
            for i in range(len(bat)):     
                if bat[i][0] in list:
                    continue
                else:       
                    item= QtWidgets.QListWidgetItem(bat[i][0])
                    font = QtGui.QFont()
                    font.setBold(True)
                    font.setWeight(75)
                    font.setPointSize(12)
                    item.setFont(font)
                    self.avail_listWidget.addItem(item)
    
        elif self.bwl_radioButton.isChecked() == True :
            statcursor.execute("select player from stats where ctg = 'BWL';")
            bwl = statcursor.fetchall()
            self.avail_listWidget.clear()
            list=[]     
            for j in range(self.used_listWidget.count()):
                list.append(self.used_listWidget.item(j).text())
            for i in range(len(bwl)):
                if bwl[i][0] in list:
                    continue
                else:
                    item= QtWidgets.QListWidgetItem(bwl[i][0])
                    font = QtGui.QFont()
                    font.setBold(True)
                    font.setWeight(75)
                    font.setPointSize(12)
                    item.setFont(font)
                    self.avail_listWidget.addItem(item)
                
        elif self.ar_radioButton.isChecked() == True :
            statcursor.execute("select player from stats where ctg = 'AR';")
            ar = statcursor.fetchall()
            self.avail_listWidget.clear()
            list=[]     
            for j in range(self.used_listWidget.count()):
                list.append(self.used_listWidget.item(j).text())
            for i in range(len(ar)):
                if ar[i][0] in list:
                    continue
                else:
                    item= QtWidgets.QListWidgetItem(ar[i][0])
                    font = QtGui.QFont()
                    font.setBold(True)
                    font.setWeight(75)
                    font.setPointSize(12)
                    item.setFont(font)
                    self.avail_listWidget.addItem(item)
                
        elif self.wk_radioButton.isChecked() == True :
            statcursor.execute("select player from stats where ctg = 'WK';")
            wk = statcursor.fetchall()
            self.avail_listWidget.clear()
            list=[]     
            for j in range(self.used_listWidget.count()):
                list.append(self.used_listWidget.item(j).text())
            for i in range(len(wk)):
                if wk[i][0] in list:
                    continue
                else:
                    item= QtWidgets.QListWidgetItem(wk[i][0])
                    font = QtGui.QFont()
                    font.setBold(True)
                    font.setWeight(75)
                    font.setPointSize(12)
                    item.setFont(font)
                    self.avail_listWidget.addItem(item)
    
    #when players in Available list is double clicked
    #It moves the item from available player list to selected player list                
    def remove_1(self,item): 
                   
        if self.bat_radioButton.isChecked()==True:
            self.avail_listWidget.takeItem(self.avail_listWidget.row(item))
            font = QtGui.QFont()
            font.setBold(True)
            font.setWeight(75)
            font.setPointSize(12)
            item.setFont(font)
            self.used_listWidget.addItem(item)
            self.batcount += 1
            self.totalcount += 1
            self.bat_number.display(self.batcount)
            self.total_number.display(self.totalcount)
            statcursor.execute('select value from stats where player = "'+item.text()+'"')
            val = statcursor.fetchall()
            self.availcount -= val[0][0]
            self.PtAvail.display(self.availcount)
            self.usedcount += val[0][0]
            self.PtUsed.display(self.usedcount)
            if self.batcount >5:
                self.msgDialog.information(MainWindow, 'Message', 'Not more than 5 Batsman are allowed')
                self.remove_2(item) #using this to revert the selection
            
        if self.bwl_radioButton.isChecked()==True:
            self.avail_listWidget.takeItem(self.avail_listWidget.row(item))
            font = QtGui.QFont()
            font.setBold(True)
            font.setWeight(75)
            font.setPointSize(12)
            item.setFont(font)
            self.used_listWidget.addItem(item)
            self.bwlcount += 1
            self.totalcount += 1
            self.bwl_number.display(self.bwlcount)
            self.total_number.display(self.totalcount)
            statcursor.execute('select value from stats where player = "'+item.text()+'"')
            val = statcursor.fetchall()
            self.availcount -= val[0][0]
            self.PtAvail.display(self.availcount)
            self.usedcount += val[0][0]
            self.PtUsed.display(self.usedcount)
            if self.bwlcount >6:
                self.msgDialog.information(MainWindow, 'Message', 'Not more than 5 Bowlers are allowed')
                self.remove_2(item)
            
        if self.ar_radioButton.isChecked()==True:
            self.avail_listWidget.takeItem(self.avail_listWidget.row(item))
            font = QtGui.QFont()
            font.setBold(True)
            font.setWeight(75)
            font.setPointSize(12)
            item.setFont(font)
            self.used_listWidget.addItem(item)
            self.arcount += 1
            self.totalcount += 1
            self.ar_number.display(self.arcount)
            self.total_number.display(self.totalcount)
            statcursor.execute('select value from stats where player = "'+item.text()+'"')
            val = statcursor.fetchall()
            self.availcount -= val[0][0]
            self.PtAvail.display(self.availcount)
            self.usedcount += val[0][0]
            self.PtUsed.display(self.usedcount)
            if self.arcount >2:
                self.msgDialog.information(MainWindow, 'Message', 'Not more than 2 AllRounders are allowed')
                self.remove_2(item)
            
        if self.wk_radioButton.isChecked()==True:
            self.avail_listWidget.takeItem(self.avail_listWidget.row(item))
            font = QtGui.QFont()
            font.setBold(True)
            font.setWeight(75)
            font.setPointSize(12)
            item.setFont(font)
            self.used_listWidget.addItem(item)
            self.wkcount += 1
            self.totalcount += 1
            self.wk_number.display(self.wkcount)
            self.total_number.display(self.totalcount)
            statcursor.execute('select value from stats where player = "'+item.text()+'"')
            val = statcursor.fetchall()
            self.availcount -= val[0][0]
            self.PtAvail.display(self.availcount)
            self.usedcount += val[0][0]
            self.PtUsed.display(self.usedcount)
            if self.wkcount >1:
                self.msgDialog.information(MainWindow, 'Message', 'Not more than 1 WicketKeeper is allowed')
                self.remove_2(item)
        if self.availcount < 0:
           self.msgDialog.information(MainWindow, 'Message', 'Cannot use more than 1000 points')
           self.remove_2(item)
        if self.totalcount > 11:
           self.msgDialog.information(MainWindow, 'Message', 'Not more than 11 Players are allowed')
           self.remove_2(item)
    
    #when players in selected list is double clicked
    #It moves the item from selected player list to available player list        
    def remove_2(self,item):
        self.used_listWidget.takeItem(self.used_listWidget.row(item))
        statcursor.execute('select ctg from stats where player = "'+item.text()+'"')
        ctg = statcursor.fetchall()
        if ctg[0][0]=='BAT':
            #it will show the player name in available plaer list if
            #player category and the radioButton matches
            if self.bat_radioButton.isChecked()==True:        
                font = QtGui.QFont()
                font.setBold(True)
                font.setWeight(75)
                font.setPointSize(12)
                item.setFont(font)
                self.avail_listWidget.addItem(item)            
            self.batcount -= 1
            self.totalcount -= 1
            self.bat_number.display(self.batcount)
            self.total_number.display(self.totalcount)
            statcursor.execute('select value from stats where player = "'+item.text()+'"')
            val = statcursor.fetchall()
            self.availcount += val[0][0]
            self.PtAvail.display(self.availcount)
            self.usedcount -= val[0][0]
            self.PtUsed.display(self.usedcount)
        
        elif ctg[0][0]=='BWL':    
            if self.bwl_radioButton.isChecked()==True:            
                font = QtGui.QFont()
                font.setBold(True)
                font.setWeight(75)
                font.setPointSize(12)
                item.setFont(font)
                self.avail_listWidget.addItem(item)           
            self.bwlcount -= 1
            self.totalcount -= 1
            self.bwl_number.display(self.bwlcount)
            self.total_number.display(self.totalcount)
            statcursor.execute('select value from stats where player = "'+item.text()+'"')
            val = statcursor.fetchall()
            self.availcount += val[0][0]
            self.PtAvail.display(self.availcount)
            self.usedcount -= val[0][0]
            self.PtUsed.display(self.usedcount)
        
        elif ctg[0][0]=='AR':    
            if self.ar_radioButton.isChecked()==True:           
                font = QtGui.QFont()
                font.setBold(True)
                font.setWeight(75)
                font.setPointSize(12)
                item.setFont(font)
                self.avail_listWidget.addItem(item)        
            self.arcount -= 1
            self.totalcount -= 1
            self.ar_number.display(self.arcount)
            self.total_number.display(self.totalcount)
            statcursor.execute('select value from stats where player = "'+item.text()+'"')
            val = statcursor.fetchall()
            self.availcount += val[0][0]
            self.PtAvail.display(self.availcount)
            self.usedcount -= val[0][0]
            self.PtUsed.display(self.usedcount)
        
        elif ctg[0][0]=='WK':    
            if self.wk_radioButton.isChecked()==True:         
                font = QtGui.QFont()
                font.setBold(True)
                font.setWeight(75)
                font.setPointSize(12)
                item.setFont(font)
                self.avail_listWidget.addItem(item)           
            self.wkcount -= 1
            self.totalcount -= 1
            self.wk_number.display(self.wkcount)
            self.total_number.display(self.totalcount)
            statcursor.execute('select value from stats where player = "'+item.text()+'"')
            val = statcursor.fetchall()
            self.availcount += val[0][0]
            self.PtAvail.display(self.availcount)
            self.usedcount -= val[0][0]
            self.PtUsed.display(self.usedcount)
            
            
if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
